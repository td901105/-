如何应对软件研发中需求和实现的不确定性

不确定性：
1. 需求的不确定性
2. 实现的不确定性

需求不确定
1.需求不确定客观存在

2.需求不确定引发的问题：
    项目计划倒排
    质量、工程活动没做到位
    管理失控，开发失去节奏
    后期问题爆发，延期交付

实现的不确定性：
  软件早期不确定
  过程中持续新增修改代码

实现的不确定性引发的问题
  架构和设计不能持续演进，维护成本高，增加新需求困难
  没有自动化测试，每一步修改都有风险
  代码质量持续腐化，可读性差，可维护性差


解决思路：
1. 流程体系建设 （迭代和反馈构建研发流程）
	（1） 迭代 --- 大目标拆解成小目标，然后迭代开发
	（2） 工程活动持续优化，是一个闭环，随时反馈，不是一锤子买卖


2. 工程实践
	（1）用解耦的架构应对不确定性
		架构需要确定系统边界，同时需要对各个系统内部模块切分
		（划分边界的依据之一，将经常变化的部分和不变化的部分隔离开来）
		架构不仅需要支撑软件功能实现，还需要支撑持续开发、部署、运行、维护、测试等

		架构设计原则 SOLID

		架构是持续演进的


	（2） 编写可维护性的代码应对不确定性
		可读性
		简单，复杂度低
		减少重复代码

		命名

		代码（自注释）

		用函数降低复杂度，类的封装

	（3）自动化测试应对不确定性
		少做端到端测试，多做单元测试和组件测试
		自动化开发者测试的价值：
		（1）尽早发现 bug，越早发现的 bug，其修复成本越低
		（2）持续重构的测试安全网，重构更自信，不容易埋雷
		（3）驱动形成良好的设计，代码更 clean 、模块解耦、更好的系统可测试性
		（4）测试代码是理解代码实现的最佳匹配文档

	（4）其他实践：测试驱动开发、重构、持续集成

		测试驱动开发：
			写一点，测一点，及时测试
			随时重构
			要想跑得快，先要跑的稳



